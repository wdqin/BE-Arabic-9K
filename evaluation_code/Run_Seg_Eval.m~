%ResultsPath = 'C:\Users\Randa\Desktop\test\R\'; % The path to xml generated by ECDP with segmented regions

ResultsPath = '/research/arabic-doc/tmp/results/testing_model-0/xml/';
%XMLPath = 'C:\Users\Randa\Desktop\test\'; % The path to the folder where annotations exist
XMLPath = '/research/arabic-doc/tmp/results/testing_model-0/gt/';
IMGPath = '/research/arabic-doc/tmp/results/testing_model-0/jpg/'; % Specify another path where the images flder is located if applies
%xlsName = 'C:\Users\Randa\Desktop\test\AllResults.xls';
xlsName1 = '/research/arabic-doc/ArabicDocumentAnalysis/evaluation code/segmentation_result.xls';
xlsName2 = '/research/arabic-doc/ArabicDocumentAnalysis/evaluation code/block_classification_result.xls';   
xlsName3 = '/research/arabic-doc/ArabicDocumentAnalysis/evaluation code/pixel_classification_result.xls';

Annotations = dir(strcat(XMLPath,'*.xml')) % lists all xml found in annotations folder

AllSegmentationResult = [];
AllClassificationResults = [];
AllPixelResults = [];
SEG = []; CLASS = []; PIX = [];
%SEG = [SEG;{'Name','OSE','USE','MSE','FA','CS','rho'}];
%CLASS = [CLASS;{'Name','F1','Acc'}];
%PIX = [PIX;{'Name','TPA','FgPA'}];
for i = 1:length(Annotations)
    %compose the full names of the image and corresponding ground truth XML
    %and the segmentation result xml
    name_split = split(Annotations(i).name,'.')
    prefix_name = name_split(1)
    XMLName = char(strcat(XMLPath,prefix_name,'.xml'))
    ImgName = char(strcat(IMGPath,prefix_name,'.jpg'))
    ResName = char(strcat(ResultsPath,prefix_name,'.xml'))
    
    TextPoly = 0; ImgPoly = 0;
    TextRegions = []; ImgRegions = [];
    
    display(ImgName)
    
    if exist(ImgName,'file')    % check if the image file exists
        Img2 = imread(ImgName); % Read the current image in a matrix form
        if length(size(Img2))==3 %in case of Colored RGB image input conver =t to gray scale
            J = rgb2gray(Img2);
            Img2 = [];
            Img2 = J;
        end
        
        %%%%%%%
%         read_xml0=xml2struct(XMLName)
        read_xml=xml2struct(ResName);                                      % read and save xml into structure
        Region_name=read_xml.Children(size(read_xml.Children,2)).Children;                          % read and save all regions data within the image
%         Region_name=read_xml.Children(4).Children;                          % read and save all regions data within the image
        Region_counter=1;                                                   % regions counter
        while(Region_counter<=size(Region_name,2))                          % Loop on all regions within the current image file
            if(strcmp(Region_name(Region_counter).Name,'TextRegion'))
                TextPoly=TextPoly+1;
                
                p=Region_name(Region_counter).Children
%                 zz=p(2).Attributes.Value;                                   % Extracting as strings
                zz=p.Attributes.Value;
                x = strread(zz,'%s','delimiter',' ');
                xx1=cell2mat(x(1));
                yy1 = strread(xx1,'%s','delimiter',',');
                xx2=cell2mat(x(2));
                yy2 = strread(xx2,'%s','delimiter',',');
                xx3=cell2mat(x(3));
                yy3 = strread(xx3,'%s','delimiter',',');
                xx4=cell2mat(x(4));
                yy4 = strread(xx4,'%s','delimiter',',');
                
                a=str2num(cell2mat(yy1(1)));                                % Conversion to numbers
                b=str2num(cell2mat(yy1(2)));
                c=str2num(cell2mat(yy2(1)));
                d=str2num(cell2mat(yy2(2)));
                e=str2num(cell2mat(yy3(1)));
                f=str2num(cell2mat(yy3(2)));
                g=str2num(cell2mat(yy4(1)));
                h=str2num(cell2mat(yy4(2)));
                
                TextRegions{TextPoly,1}.Coords = [min([a,c,e,g]) max([a,c,e,g]) min([b,d,f,h]) max([b,d,f,h])];
                %                 Tcoords = TextRegions{TextPoly,1}.Coords
                
            elseif(strcmp(Region_name(Region_counter).Name,'ImageRegion')) % Non-Text regions
                ImgPoly=ImgPoly+1;
                p=Region_name(Region_counter).Children;
                zz=p.Attributes.Value;
                
                x = strread(zz,'%s','delimiter',' ');
                xx1=cell2mat(x(1));
                yy1 = strread(xx1,'%s','delimiter',',');
                xx2=cell2mat(x(2));
                yy2 = strread(xx2,'%s','delimiter',',');
                xx3=cell2mat(x(3));
                yy3 = strread(xx3,'%s','delimiter',',');
                xx4=cell2mat(x(4));
                yy4 = strread(xx4,'%s','delimiter',',');
                
                a=str2num(cell2mat(yy1(1)));                                % Conversion to numbers
                b=str2num(cell2mat(yy1(2)));
                c=str2num(cell2mat(yy2(1)));
                d=str2num(cell2mat(yy2(2)));
                e=str2num(cell2mat(yy3(1)));
                f=str2num(cell2mat(yy3(2)));
                g=str2num(cell2mat(yy4(1)));
                h=str2num(cell2mat(yy4(2)));
                
                ImgRegions{ImgPoly,1}.Coords = [min([a,c,e,g]) max([a,c,e,g]) min([b,d,f,h]) max([b,d,f,h])];
            end
            Region_counter=Region_counter+1;
        end
        %%%%%%%%%%
        
        SegmentationResult= Evaluate_Block_Segmentation(Img2,XMLName,TextRegions,ImgRegions, TextPoly, ImgPoly)
        ClassificationResults = Evaluate_Block_Classification2(Img2,XMLName,TextRegions,ImgRegions, TextPoly, ImgPoly)
        PixelResults = Evaluate_Pixels(Img2,XMLName,TextRegions,ImgRegions, TextPoly, ImgPoly)
        AllSegmentationResult(i,1:length(SegmentationResult)) = SegmentationResult;
        AllClassificationResults(i,1:length(ClassificationResults)) = ClassificationResults;
         AllPixelResults(i,1:length(PixelResults))= PixelResults;
         
         %SEG = [SEG; {Annotations(i).name,SegmentationResult(1),SegmentationResult(2),SegmentationResult(3),SegmentationResult(4),SegmentationResult(5),SegmentationResult(6)}];
         %CLASS = [CLASS; {Annotations(i).name,ClassificationResults(1),ClassificationResults(2)}];
         %PIX = [PIX; {Annotations(i).name,PixelResults(1),PixelResults(2)}];
		 
		 SEG = [SEG; {SegmentationResult(1),SegmentationResult(2),SegmentationResult(3),SegmentationResult(4),SegmentationResult(5),SegmentationResult(6)}];
         CLASS = [CLASS; {ClassificationResults(1),ClassificationResults(2)}];
         PIX = [PIX; {PixelResults(1),PixelResults(2)}];


    else
        disp ('Image does not exist. Check the image full name')
    end
end

%xlswrite(xlsName,SEG,1);
%xlswrite(xlsName,CLASS,2);
%xlswrite(xlsName,PIX,3);

xlswrite(xlsName1,SEG,1);
xlswrite(xlsName2,CLASS,1);
xlswrite(xlsName3,PIX,1);
AverageSegmentationResults = mean(AllSegmentationResult,1)
AverageClassificationResults = mean(AllClassificationResults,1)
AveragePixelResults = mean(AllPixelResults,1)
    